<div id="ABC">
<div style="padding:5px; border:1px solid #000000; background-color:#C0C0C0; font-size:300%; font-weight:400; color: #000000; width:100%;">
Evaluation page: Mutation Impact [R Code]
<div style="padding:5px; margin-top:20px; margin-bottom:10px; background-color:#C0C0C0; font-size:30%; font-weight:200; color: #000000; ">
(Thomas Hollis' submission)
</div>
</div>


 __TOC__


= Task 1 =

Code developed:

<source lang="r">
# Thomas Hollis (BCH441, University of Toronto) -v2.1 
#     - Purpose: Mutation Impact Evaluation (load two functions used for mutation effect analysis)
#     - Bugs & issues: no bugs, no issues, no warnings
#     - Acknowledgements: thanks to Prof. Steipe's learning unit on R Genetic Code Optimality which was of great help

###### Section 1. Load packages if not already installed ###### 
if (!require(Biostrings, quietly=TRUE)) {
  if (!exists("biocLite")) {
    suppressMessages(source("https://bioconductor.org/biocLite.R")) #slight modification to load silently (I love the clear R documentation)
  }
  suppressMessages(biocLite("Biostrings")) #slight modification to always load packages silently (nb: biocLite does not play nice)
  suppressMessages(library(Biostrings, warn.conflicts = FALSE, quietly=TRUE)) #slight modification to always load packages silently
}

if (!require(readr, quietly=TRUE)) {
  install.packages("readr")
  suppressMessages(library(readr, quietly=TRUE)) #slight modification to always load packages silently
}

if (!require(testthat, quietly=TRUE)) {
  install.packages("testthat")
  suppressMessages(library(testthat, quietly=TRUE)) #slight modification to always load packages silently
}

###### Section 2. Load evalMut function ######
evalMut <- function(FA, N) {
  # Purpose: evaluate the distribution of silent, missense and nonsense
  # codon changes in cDNA read from FA for N random mutation trials.
  # Parameters:
  #     FA   chr      Filename of a FASTA formatted sequence file of cDNA
  #                     beginning with a start codon.
  #     N    integer  The number of point mutation trials to perform
  # Value:   list     List with the following elements:
  #                      FA    chr  the input file
  #                      N     num  same as the input parameter
  #                      nSilent    num  the number of silent mutations
  #                      nMissense  num  the number of missense mutations
  #                      nNonsense  num  the number of nonsense mutations
  
  #2.1. Load and process data
  nSilent <- 0 #initialise silent mutation object
  nMissense <- 0 #initialise missense mutation object
  nNonsense <- 0 #initialise nonsense mutation object
  
  seq <- paste0(readLines(FA)[-1], collapse = "") #load and clean the sequence
  codons <- as.character(codons(DNAString(seq))) #convert to codons, can drop stop codon using  codons <- codons[-length(codons)]
  
  AA <- character(length(seq)) #initialise amino acid object
  for (j in seq_along(codons)) { 
    AA[j] <- GENETIC_CODE[codons[j]] #iterate through all codons, set AA
  }
  
  #2.2. Mutate for N random mutations & count the silent, missense and nonsense codon changes
  nuc <- c("A", "C", "G", "T") #initialise nucl names

  #Note this loop was greatly inspired by work done by Prof. Steipe 
  #Available at: http://steipe.biochemistry.utoronto.ca/abc/index.php/RPR-Genetic_code_optimality
  for (i in 1:N) {
    mutCodons <- codons #initialise the mutated codons object
    loc <- sample(1:length(mutCodons), 1) #pick random mutation location
    
    #2.2.1. Mutate
    triplet <- unlist(strsplit(mutCodons[loc], "")) #split into three nucl.
    iNuc <- sample(1:3, 1)                          #choose one of the three
    mutNuc <- sample(nuc[nuc != triplet[iNuc]], 1)  #chose a mutated nucleotide
    triplet[iNuc] <- mutNuc                         #replace the original
    mutCodons[loc] <- paste0(triplet, collapse = "")  #collapse it to a codon
    
    #2.2.2. Translate back
    mutAA <- character(length(seq)) #initialise mutated amino acid object
    for (j in seq_along(mutCodons)) { 
      mutAA[j] <- GENETIC_CODE[mutCodons[j]] #iterate through all mutated codons, set mutAA
    }
    
    #2.2.3. Count the mutation types
    if (mutAA[loc] == AA[loc]) {    #check if silent
      nSilent <- nSilent + 1
    } else if (mutAA[loc] == "*" | AA[loc] == "*") { #check if nonsense
      nNonsense <- nNonsense + 1
    } else {                        #else missense (assuming single point)
      nMissense <- nMissense + 1
    } 
  }

  #2.3. Create output list   
  list_out <- list(FA, N, nSilent, nMissense, nNonsense)
  
  return (list_out)
  
}

###### Section 3. Load readIntOGen function ######
readIntOGen <- function(IN) {
  # Purpose: read and parse an IntOGen mutation data file. Return only the
  #            number of silent, missense, and nonsense point mutations.
  #            All indels are ignored.
  # Parameters:
  #     IN   chr      Filename of an IntOGen mutation data file.
  # Value:   list     List with the following elements:
  #                      nSilent    num the number of silent mutations
  #                      nMissense  num the number of missense mutations
  #                      nNonsense  num the number of nonsense mutations
  
  #3.1. Load and process data
  DataIntOGen <- read_tsv(IN)
  
  nSilent <- 0 #initialise silent mutation object
  nMissense <- 0 #initialise missense mutation object
  nNonsense <- 0 #initialise nonsense mutation object

  #3.2. Count the mutations
  for (i in 1:length(DataIntOGen$MOST_SEVERE)) {
    if (DataIntOGen$MOST_SEVERE[i] == "synonymous_variant") {
      nSilent <- nSilent + 1
    } else if (DataIntOGen$MOST_SEVERE[i] == "missense_variant") {
      nMissense <- nMissense + 1
    } else if (DataIntOGen$MOST_SEVERE[i] == "stop_gained") {
      nNonsense <- nNonsense + 1
    } 
  }
  
  list_out <- list(nSilent, nMissense, nNonsense)
  
  return (list_out)

}

###### Section 4. Test code & analysis script ######

#4.1. Protected code for testing
if (FALSE){ 
  #Test 4.1.1: Use this test to check the file sources cleanly & the right functions get loaded
  expect_silent(source("tom_INT1.R"))
  source("tom_INT1.R") 
  
  #Test 4.1.2: Use this test to check that data can be loaded cleanly from paths and written to FA
  FA <- "./data/KRAS_HSa_coding.fa"
  data_KRAS <- read_file("./data/KRAS_HSa_coding.fa")
  (data_KRAS)
  data_PTPN11 <- read_file("./data/PTPN11_HSa_coding.fa")
  (data_PTPN11)
  data_OR1A1 <- read_file("./data/OR1A1_HSa_coding.fa")
  (data_OR1A1)
  rm(FA, data_KRAS, data_PTPN11, data_OR1A1) #always clean up after yourself!
  
  #Test 4.1.3: Use this test to make sure the 1st function runs as expected on KRAS, PTPN11 & OR1A1
  N <- 100000 #point mutations, modifiable (will take 20s + to run)
  evalMut("./data/KRAS_HSa_coding.fa",N) #expected output is nSilent = 20501, nMissense = 73927, nNonsense = 5572
  evalMut("./data/PTPN11_HSa_coding.fa",N) #expected output is nSilent = 21038, nMissense = 74066, nNonsense = 4896
  evalMut("./data/OR1A1_HSa_coding.fa",N) #expected output is nSilent = 23382, nMissense = 73007, nNonsense = 3611
  #Note: the expected outputs above will change on every iteration since we have not set a seed 
  #Sanity check: outputs are indeed close to those of Prof. Steipe (with his seq, function outputs nSilent = 24021, nMissense = 67998, nNonsense = 7981)
  
  #Test 4.1.4: Use this test make sure the 2nd function runs as expected
  IN <- "./data/intogen-KRAS-distribution-data.tsv"
  readIntOGen("./data/intogen-KRAS-distribution-data.tsv") #expected output = 16 synonymous, 160 missense, 0 nonsense (as per the file)
  readIntOGen("./data/intogen-PTPN11-distribution-data.tsv") #expected output = 23 synonymous, 82 missense, 5 nonsense (as per the file)
  readIntOGen("./data/intogen-OR1A1-distribution-data.tsv") #expected output = 17 synonymous, 28 missense, 3 nonsense (as per the file)
  #Note: the expected outputs above should not change as they are reading from a file
  #Sanity check: the expected outputs above are the same as those in the file (but not the same as those online, must be much smaller)
  
  #Test 4.1.5: Nuclear option - don't run this unless you really have to
  rm(list=ls()) 
}

#4.2. Protected script for simulating 10000 point mutations of PTPN11 and analysing the results
if (FALSE){ 
  #4.2.1. Acquire the data and store in objects
  simulated <- evalMut("./data/PTPN11_HSa_coding.fa",10000)
  literature <- readIntOGen("./data/intogen-PTPN11-distribution-data.tsv") 
  
  #4.2.2. Calculate the totals 
  simTotal <- sum(simulated[[3]], simulated[[4]], simulated[[5]])
  litTotal <- sum(literature[[1]], literature[[2]], literature[[3]])
  simPercentageSilent <- (simulated[[3]]/simTotal)*100
  litPercentageSilent <- (literature[[1]]/litTotal)*100 
  simPercentageMissense <- (simulated[[4]]/simTotal)*100
  litPercentageMissense <- (literature[[2]]/litTotal)*100
  simPercentageNonsense <- (simulated[[5]]/simTotal)*100
  litPercentageNonsense <- (literature[[3]]/litTotal)*100
  
  #4.2.3. Display the totals side by side for comparison (note as before expected values will fluctuate)
  cat(" Our simulations predict", simPercentageSilent, "% silent mutations, while we oberserved", litPercentageSilent, "%.\n",
      "Our simulations predict", simPercentageMissense, "% missense mutations, while we oberserved", litPercentageMissense, "%.\n",
      "Our simulations predict", simPercentageNonsense, "% nonsense mutations, while we oberserved", litPercentageNonsense, "%.") 
  
  # Output:
  # Our simulations predict 21.78 % silent mutations, while we oberserved 20.90909 %.
  # Our simulations predict 73.2 % missense mutations, while we oberserved 74.54545 %.
  # Our simulations predict 5.02 % nonsense mutations, while we oberserved 4.545455 %.
}

# END
</source>

From the above analysis it seems that the observed (literature) mutation of PTPN11 is extremely close to the simulated random mutations (as achieved in the code). This is true for silent, missense and nonsense mutations alike. As discussed in the integrator unit, if PTPN11 was a cancer driver we expect cancer mutations to spare PTPN11 or deregulate it to enhance its activity. Indeed our results as shown by the script in section 4.2 would seem to suggest that the cancer has spared PTPN11. Perhaps it has evolved to do this as PTPN11 helps the cancer loop repeat itself. This hypothesis would have to be further investigated but it is indeed in line with the information on the [https://www.intogen.org/search?gene=PTPN11 IntOGen database]. 


[[Category:EVAL-INT-Mutation_impact]]
